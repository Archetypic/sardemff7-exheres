# Copyright 2011 Quentin "Sardem FF7" Glidic <sardemff7.pub@gmail.com>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon mozilla-app.eclass from Gentoo sardemff7 overlay, which is:
#     Copyright 1999-2011 Gentoo Foundation

SCM_SECONDARY_REPOSITORIES="mozdom? ( moz_dom_inspector ) ${SCM_SECONDARY_REPOSITORIES}"

require toolchain-funcs autotools [ supported_autoconf=[ 2.1 ] supported_automake=[ none ] ] flag-o-matic mozilla-scm


SLOT="0"

DEPENDENCIES="
    build:
        meta-sync/mozilla-repositories[mozdom=]

        webm? ( dev-lang/yasm )

    build+run:
        app-arch/unzip
        app-spell/hunspell[>=1.2]
        dev-libs/expat
        dev-libs/glib:2
        dev-libs/libevent[>=1.4.7]
        dev-libs/libffi
        dev-libs/libIDL[>=0.8.0]
        dev-libs/nss[~scm]
        media-libs/jpeg
        sys-devel/binutils[>=2.16.1]
        sys-libs/zlib[>=1.1.4]
        x11-libs/cairo[X][>=1.10.2]
        x11-libs/gtk+[>=2.14.0]
        x11-libs/libXmu
        x11-libs/libXrender
        x11-libs/libXt
        x11-libs/pango[>=1.10.1]
        x11-libs/pixman

        alsa? ( sys-sound/alsa-lib )
        dbus? ( dev-libs/dbus-glib[>=0.72] )
        gconf? ( gnome-base/gconf:2 )
        libnotify? ( x11-libs/libnotify )
        startup-notification? ( x11-libs/startup-notification )
        webm? ( media-libs/libvpx )
        wifi? ( net-wireless/wireless_tools )
"

MYOPTIONS="
    alsa
    bindist
    debug
    dbus
    gconf                [[ description = [ GConf support ] ]]
    libnotify
    mozdom               [[ description = [ Mozilla DOM Inspector ] ]]
    raw                  [[ description = [ RAW image formats ] ]]
    startup-notification
    webm                 [[ description = [ WebM video format ] ]]
    wifi

    webm [[ requires = alsa ]]

    platform: x86
"


mozilla-app_pkg_setup() {
    default

    # Set by configure (plus USE_AUTOCONF=1), but useful for NSPR
    export MOZILLA_CLIENT=1
    export BUILD_OPT=1
    export NO_STATIC_LIB=1
    export USE_PTHREADS=1

    MOZILLA_FIVE_HOME="/usr/${LIBDIR}/${PN}"
    case "${PN}" in
        firefox)
            MOZ_APPLICATION=browser
        ;;
        thunderbird)
            MOZ_APPLICATION=mail
        ;;
    esac


    if [ "${XULRUNNER_HG_MODULE}" = "mozilla-aurora" ]; then
        MOZ_BRANDING=aurora
    elif option bindist; then
        MOZ_BRANDING=nightly
    else
        MOZ_BRANDING=official

        elog "You are enabling official branding. You may not redistribute this build"
        elog "to any users on your network or the internet. Doing so puts yourself into"
        elog "a legal problem with Mozilla Foundation"
    fi
}

mozilla-app_src_unpack() {
    scm_src_unpack
    option mozdom && edo mv "${WORKBASE}"/moz_dom_inspector "${WORKBASE}"/moz_xulrunner/extensions/inspector
}

mozilla-app_src_prepare() {
    # fix double symbols due to double -ljemalloc
    #edo sed -i \
    #   -e '/^LIBS += $(JEMALLOC_LIBS)/s/^/#/' \
    #   xulrunner/stub/Makefile.in

    # Enable gnomebreakpad
    if option debug; then
        edo sed -i \
            -e "s:GNOME_DISABLE_CRASH_DIALOG=1:GNOME_DISABLE_CRASH_DIALOG=0:g" \
            build/unix/run-mozilla.sh
    fi

    # Exherbo install dirs
    edo sed -i \
        -e 's:$(datadir)/idl/$(MOZ_APP_NAME)-$(MOZ_APP_VERSION):$(includedir)/idl:' \
        -e 's:$(MOZ_APP_NAME)-$(MOZ_APP_VERSION):'${PN}':' \
        -e 's:$(MOZ_APP_NAME)-devel-$(MOZ_APP_VERSION):'${PN}'-devel:' \
        config/autoconf.mk.in

    eautoconf

    cd js/src
    eautoconf
}

mozconfig_annotate() {
    declare reason=$1 x ; shift
    [[ $# -gt 0 ]] || die "mozconfig_annotate missing flags for ${reason}\!"
    for x in ${*}; do
        echo "ac_add_options ${x} # ${reason}" >>.mozconfig
    done
}

mozconfig_flag() {
    mozconfig_annotate "USE-flag: $(optionq $1 && echo +$1 || echo -$1)" "$2"
}

mozconfig_use_enable() {
    mozconfig_flag "$1" "$(option_enable "$@")"
}

mozconfig_use_with() {
    mozconfig_flag "$1" "$(option_with "$@")"
}

mozilla-app_src_configure() {
    MAKEOPTS=${MAKEOPTS/--no-print-directory/}

    export ac_cv_visibility_pragma=no

    ####################################
    #
    # Setup the initial .mozconfig
    # See https://developer.mozilla.org/en/Configuring_Build_Options
    #
    ####################################

    edo cp ${MOZ_APPLICATION}/config/mozconfig .mozconfig

    ####################################
    #
    # CFLAGS setup
    #
    ####################################

    # Debug
    if option debug; then
        mozconfig_annotate 'Debug activated' \
            --disable-optimize \
            --enable-valgrind \
            --enable-debug=-ggdb \
            --enable-debug-modules=all \
            --enable-debugger-info-modules
    else
        local opt=-O2
        # Set optimization level based on CFLAGS
        if option platform:x86; then
            if has -O0 ${CFLAGS}; then
                opt=-O0
            elif has -O1 ${CFLAGS}; then
                opt=-O1
            elif has -Os ${CFLAGS}; then
                opt=-Os
            fi
        elif has -O3 ${CFLAGS}; then
            opt=-O3
        fi
        mozconfig_annotate 'optimization' --enable-optimize=$opt
        mozconfig_annotate 'Debug deactivated' \
            --disable-debug \
            --disable-debug-symbols \
            --disable-tests
    fi

    # Now strip optimization from CFLAGS so it doesn't end up in the
    # compile string
    filter-flags '-O*'

    # Strip over-aggressive CFLAGS - Mozilla supplies its own
    # fine-tuned CFLAGS and shouldn't be interfered with..  Do this
    # AFTER setting optimization above since strip-flags only allows
    # -O -O1 and -O2
    strip-flags

    if [[ $(gcc-major-version) -eq 3 ]]; then
        # Enable us to use flash, etc plugins compiled with gcc-2.95.3
        mozconfig_annotate "building with >=gcc-3" --enable-old-abi-compat-wrappers

        # Needed to build without warnings on gcc-3
        CXXFLAGS="${CXXFLAGS} -Wno-deprecated"

        if option platform:x86 && [[
            ( $(gcc-minor-version) -lt 2 ||
                ( $(gcc-minor-version) -eq 2 && $(gcc-micro-version) -lt 3 )
            ) ]]
        then
            replace-flags -march=pentium4 -march=pentium3
            filter-flags -msse2
        fi
    elif [[ $(gcc-major-version) -lt 4 ]]; then
        append-flags -fno-stack-protector
    fi

    # Go a little faster; use less RAM
    append-flags "$MAKEEDIT_FLAGS"

    # Ensure we do not fail on i{3,5,7} processors that support -mavx
    append-flags -mno-avx

    ####################################
    #
    # mozconfig setup
    #
    ####################################

    mozconfig_annotate 'Exherbo system' \
        --disable-installer \
        --disable-pedantic \
        --with-system-jpeg \
        --with-system-bz2 \
        --with-system-zlib \
        --disable-updater \
        --enable-system-cairo \
        --enable-system-hunspell \
        --enable-system-ffi \
        --enable-system-system-sqlite \
        --disable-strip \
        --enable-default-toolkit=cairo-gtk2 \
        --disable-strip-libs \
        --disable-install-strip \
        --with-system-nspr \
        --with-nspr-prefix=/usr \
        --with-system-nss \
        --with-nss-prefix=/usr \
        --with-system-libevent=/usr \
        --x-includes=/usr/include \
        --x-libraries=/usr/${LIBDIR} \
        --with-distribution-id=org.exherbo

    mozconfig_annotate 'Exherbo defaults' \
        --enable-gio \
        --enable-single-profile \
        --disable-profilesharing \
        --disable-profilelocking

    sed -i \
        -e '/--enable-application=/d' \
        -e '/--enable-extensions=/d'\
        .mozconfig

    MOZ_EXTENSIONS="default"
    option mozdom && MOZ_EXTENSIONS+=",inspector"
    mozconfig_annotate 'Application defaults' \
        --enable-ipc \
        --enable-application=${MOZ_APPLICATION} \
        --with-default-mozilla-five-home="${MOZILLA_FIVE_HOME}" \
        --enable-extensions="${MOZ_EXTENSIONS}"

    mozconfig_annotate 'Basic features' \
        --enable-crypto \
        --enable-tracejit \
        --enable-pango \
        --enable-mathml \
        --enable-safe-browsing \
        --enable-storage \
        --enable-places \
        --enable-places_bookmarks

    if [ "${MOZ_BRANDING}" = "official" ]; then
        mozconfig_annotate 'Official branding' \
            --enable-official-branding
    else
        mozconfig_annotate 'Unofficial branding' \
            --with-branding=${MOZ_APPLICATION}/branding/${MOZ_BRANDING}
    fi

    # Use system libraries
    mozconfig_use_enable alsa ogg
    mozconfig_use_enable alsa wave
    mozconfig_use_enable dbus
    mozconfig_use_enable gconf
    mozconfig_use_enable libnotify
    mozconfig_use_enable raw
    mozconfig_use_enable startup-notification
    mozconfig_use_enable webm
    mozconfig_use_with   webm system-libvpx
    mozconfig_use_enable wifi necko-wifi

    # omni.jar breaks ff on xr
    # Bug 60668: Galeon doesn't build without oji enabled, so enable it
    # regardless of java setting.--enable-oji
    mozconfig_annotate 'Broken' \
        --disable-crashreporter \
        --enable-chrome-format=jar \
        --enable-oji

    mozconfig_annotate 'Deprecated' \
        --disable-gnomeui \
        --disable-gnomevfs


    # Currently --enable-elf-dynstr-gc only works for x86 and ppc,
    # thanks to Jason Wever <weeve@gentoo.org> for the fix.
    # -- This breaks now on ppc, no idea why
#   if option platform:x86 || option ppc && [[ ${enable_optimize} != -O0 ]]; then
    if option platform:x86 && [[ ${enable_optimize} != -O0 ]]; then
        mozconfig_annotate "x86 optimized build" --enable-elf-dynstr-gc
    fi
#   fi

    echo
    echo '=========================================================='
    echo "Building ${PF} with the following configuration"
    grep '^ac_add_options' .mozconfig | while read ac opt hash reason; do
        [[ -z ${hash} || ${hash} == \# ]] \
            || die "error reading mozconfig: ${ac} ${opt} ${hash} ${reason}"
        printf '    %-60s  %s\n' "${opt}" "${reason:-mozilla.org default}"
    done
    echo '=========================================================='
    echo

    econf \
        --hates=docdir \
        "$@"
}

mozilla-app_src_install() {
    default

    local prefdir="${MOZILLA_FIVE_HOME}/defaults/pref"
    [[ -d "${prefdir}erences" ]] && prefdir+="erences"
    insinto "${prefdir}"
    newins "${FILES}"/default-prefs.js default-exherbo.js

    local branding_path_base branding_path icon iconsname size
    branding_path_base="${WORK}"/${MOZ_APPLICATION}/branding

    [[ ! -d "${branding_path_base}"/official ]] && \
        ln -sf ../../other-licenses/branding/${PN} "${branding_path_base}"/official

    iconsname=default
    case "${MOZ_APPLICATION}" in
        mail)
            iconsname=mailicon
        ;;
    esac

    branding_path="${branding_path_base}"/${MOZ_BRANDING}
    source "${branding_path}"/configure.sh
    targeticonname="${MOZ_APP_DISPLAYNAME,,}"

    # Install icons
    for size in 16 22 24 32 48 64 72 96 128 256; do
        if [ -f "${branding_path}/${iconsname}${size}.png" ]; then
            insinto /usr/share/icons/hicolor/${size}x${size}/apps
            newins "${branding_path}"/${iconsname}${size}.png ${targeticonname}.png
        fi
        if [ -f "${branding_path}/mozicon${size}.png" ]; then
            insinto /usr/share/icons/hicolor/${size}x${size}/apps
            newins "${branding_path}"/mozicon${size}.png ${targeticonname}.png
        fi
    done

    # Install a 48x48 icon into /usr/share/pixmaps for legacy DEs
    insinto /usr/share/pixmaps
    newins "${branding_path}"/content/icon48.png ${targeticonname}.png

    # Install .desktop for menu entry
    insinto /usr/share/applications
    doins "${FILES}"/${PN}.desktop

    edo sed -i -e "s:@NAME@:${MOZ_APP_DISPLAYNAME}:" -e "s:@ICON@:${targeticonname}:" \
        "${IMAGE}"/usr/share/applications/${PN}.desktop

    # Add StartupNotify=true bug 237317
    if option startup-notification ; then
        echo "StartupNotify=true" >> "${IMAGE}"/usr/share/applications/${PN}.desktop
    fi

    #pax-mark m "${IMAGE}"/${MOZILLA_FIVE_HOME}/plugin-container
    #pax-mark m "${IMAGE}"/${MOZILLA_FIVE_HOME}/${PN}

    # Plugins dir
    hereenvd 50${PN} <<EOF
MOZ_PLUGIN_PATH="${MOZILLA_FIVE_HOME}/plugins:/usr/${LIBDIR}/mozilla/plugins:/usr/${LIBDIR}/nsbrowser/plugins:/opt/nsbrowser/plugins"
COLON_SEPARATED="MOZ_PLUGIN_PATH"
EOF
}

export_exlib_phases pkg_setup src_unpack src_prepare src_configure src_install
